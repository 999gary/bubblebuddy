#ifndef BFBB_SAVE_H
#define BFBB_SAVE_H

#define BASE_TYPE_TRIGGER      1
#define BASE_TYPE_PICKUP       4
#define BASE_TYPE_PLATFORM     6
#define BASE_TYPE_STATIC      11
#define BASE_TYPE_TIMER       14
#define BASE_TYPE_PORTAL      16
#define BASE_TYPE_GROUP       17
#define BASE_TYPE_SFX         19
#define BASE_TYPE_COUNTER     22
#define BASE_TYPE_BUTTON      24
#define BASE_TYPE_DISPATCHER  30
#define BASE_TYPE_COND        31
#define BASE_TYPE_UIFONT      33
#define BASE_TYPE_CUTSCENEMGR 40
#define BASE_TYPE_TELEPORTBOX 49
#define BASE_TYPE_TASKBOX     53
#define BASE_TYPE_TAXI        57
#define BASE_TYPE_CAMERAFLY   62

typedef struct {
    u32 id;
    u8 type;
    char *name;
} scene_table_entry;

// NOTE(jelly): this table is based off of the crc32 code from the decomp
// https://github.com/bfbbdecomp/bfbb/blob/2bc99a1efcb8fab4cbccfc416d226f4a54b851ab/src/Core/x/xutil.cpp
// this table can be generated by running xUtil_crc_init()
static const u32 g_crc32_table[256] = {
    0x00000000, 0x04c11db7, 0x09823b6e, 0x0d4326d9, 0x130476dc, 0x17c56b6b, 0x1a864db2, 0x1e475005,
    0x2608edb8, 0x22c9f00f, 0x2f8ad6d6, 0x2b4bcb61, 0x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd,
    0x4c11db70, 0x48d0c6c7, 0x4593e01e, 0x4152fda9, 0x5f15adac, 0x5bd4b01b, 0x569796c2, 0x52568b75,
    0x6a1936c8, 0x6ed82b7f, 0x639b0da6, 0x675a1011, 0x791d4014, 0x7ddc5da3, 0x709f7b7a, 0x745e66cd,
    0x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039, 0x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5,
    0xbe2b5b58, 0xbaea46ef, 0xb7a96036, 0xb3687d81, 0xad2f2d84, 0xa9ee3033, 0xa4ad16ea, 0xa06c0b5d,
    0xd4326d90, 0xd0f37027, 0xddb056fe, 0xd9714b49, 0xc7361b4c, 0xc3f706fb, 0xceb42022, 0xca753d95,
    0xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1, 0xe13ef6f4, 0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d,
    0x34867077, 0x30476dc0, 0x3d044b19, 0x39c556ae, 0x278206ab, 0x23431b1c, 0x2e003dc5, 0x2ac12072,
    0x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16, 0x018aeb13, 0x054bf6a4, 0x0808d07d, 0x0cc9cdca,
    0x7897ab07, 0x7c56b6b0, 0x71159069, 0x75d48dde, 0x6b93dddb, 0x6f52c06c, 0x6211e6b5, 0x66d0fb02,
    0x5e9f46bf, 0x5a5e5b08, 0x571d7dd1, 0x53dc6066, 0x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba,
    0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e, 0xbfa1b04b, 0xbb60adfc, 0xb6238b25, 0xb2e29692,
    0x8aad2b2f, 0x8e6c3698, 0x832f1041, 0x87ee0df6, 0x99a95df3, 0x9d684044, 0x902b669d, 0x94ea7b2a,
    0xe0b41de7, 0xe4750050, 0xe9362689, 0xedf73b3e, 0xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2,
    0xc6bcf05f, 0xc27dede8, 0xcf3ecb31, 0xcbffd686, 0xd5b88683, 0xd1799b34, 0xdc3abded, 0xd8fba05a,
    0x690ce0ee, 0x6dcdfd59, 0x608edb80, 0x644fc637, 0x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb,
    0x4f040d56, 0x4bc510e1, 0x46863638, 0x42472b8f, 0x5c007b8a, 0x58c1663d, 0x558240e4, 0x51435d53,
    0x251d3b9e, 0x21dc2629, 0x2c9f00f0, 0x285e1d47, 0x36194d42, 0x32d850f5, 0x3f9b762c, 0x3b5a6b9b,
    0x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff, 0x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623,
    0xf12f560e, 0xf5ee4bb9, 0xf8ad6d60, 0xfc6c70d7, 0xe22b20d2, 0xe6ea3d65, 0xeba91bbc, 0xef68060b,
    0xd727bbb6, 0xd3e6a601, 0xdea580d8, 0xda649d6f, 0xc423cd6a, 0xc0e2d0dd, 0xcda1f604, 0xc960ebb3,
    0xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7, 0xae3afba2, 0xaafbe615, 0xa7b8c0cc, 0xa379dd7b,
    0x9b3660c6, 0x9ff77d71, 0x92b45ba8, 0x9675461f, 0x8832161a, 0x8cf30bad, 0x81b02d74, 0x857130c3,
    0x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640, 0x4e8ee645, 0x4a4ffbf2, 0x470cdd2b, 0x43cdc09c,
    0x7b827d21, 0x7f436096, 0x7200464f, 0x76c15bf8, 0x68860bfd, 0x6c47164a, 0x61043093, 0x65c52d24,
    0x119b4be9, 0x155a565e, 0x18197087, 0x1cd86d30, 0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec,
    0x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088, 0x2497d08d, 0x2056cd3a, 0x2d15ebe3, 0x29d4f654,
    0xc5a92679, 0xc1683bce, 0xcc2b1d17, 0xc8ea00a0, 0xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb, 0xdbee767c,
    0xe3a1cbc1, 0xe760d676, 0xea23f0af, 0xeee2ed18, 0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,
    0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0, 0x9abc8bd5, 0x9e7d9662, 0x933eb0bb, 0x97ffad0c,
    0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668, 0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4,
};

#define BFBB_SAVE_FILE_GCI_MAGIC_STRING "SPONGEBOB:WHENROBOTSATTACK::RyanNeilDan"
#define BFBB_SAVE_FILE_LEDR_RANDOM_TEXT "--TakeMeToYourLeader--"

#pragma pack(push, 1)
typedef struct {
    u32 crc32_checksum;
} bfbb_save_file_block_gdat;

// TODO(jelly): figure out what the unknown bytes are (hopefully will can tell me someday)
typedef struct {
    char game_label[64];
    s32 progress;
    char unknown_bytes[12];
    u32 thumbnail_index;
    char unknown_bytes_[4];
    char random_text[sizeof(BFBB_SAVE_FILE_LEDR_RANDOM_TEXT)-1];
} bfbb_save_file_block_ledr;

typedef struct {
    char sceneid[4]; // NOTE(jelly): this is the FOURCC of the current level
} bfbb_save_file_block_room;

typedef struct {
    u32 sound_mode;
    float music_volume;
    float sfx_volume;
    u32 rumble;
} bfbb_save_file_block_pref;

typedef struct {
    s32 version;
} bfbb_save_file_block_svid;

typedef struct {
    s16 spats[15][8];
    s16 robot_data[15];
    s16 reminder_sock_cntr;
    s32 cheats;
} bfbb_save_file_block_cntr;

typedef struct {
    s32 socks;
    s32 pickups;
} bfbb_save_file_level_collectables;

typedef struct {
    s32 max_health;
    s32 character;
    s32 shinies;
    s32 spats;
    unsigned char has_bubble_bowl;
    unsigned char has_cruise_bubble;
    bfbb_save_file_level_collectables level_collectables[LEVEL_COUNT];
    s32 total_socks;
    char cutscene_played[14];
    //NOTE(Will): this stores 6 bits, i have no clue what they do :)
    u8 idiot_levels[6];
} bfbb_save_file_block_plyr;

typedef struct {
    u8 base_enable;
    u8 show_ent;
} base_type_trigger;

typedef struct {
    u8 base_enable;
    u8 show_ent;
    u8 state;
    u8 collected;
} base_type_pickup;

typedef struct {
    u8 base_enable;
    u8 show_ent;
} base_type_platform;

typedef struct {
    u8 base_enable;
    u8 show_ent;
} base_type_static;

typedef struct {
    u8 base_enable;
    u8 state;
    f32 seconds_left;
} base_type_timer;

typedef struct {
    u8 base_enable;
} base_type_group;

typedef struct {
    u8 base_enable;
} base_type_sfx;

typedef struct {
    u8 base_enable;
    s16 count;
    u8 state;
} base_type_counter;

typedef struct {
    u8 base_enable;
    u8 show_ent;
    u8 unknown_bit1;
    u8 unknown_bit2;
} base_type_button;

//wtf does this do
typedef struct {
    u8 base_enable;
} base_type_dispatcher;

typedef struct {
    u8 base_enable;
} base_type_cond;

typedef struct {
    u8 base_enable;
    u8 show_ent;
} base_type_uifont;

typedef struct {
    u8 base_enable;
    u8 show_ent;
    u8 opened;
    u32 player_state;
} base_type_teleportbox;

typedef struct {
    u8 state;
} base_type_taskbox;

typedef struct {
    u8 base_enable;
} base_type_taxi;

typedef struct {
    u8 base_enable;
} base_type_camerafly;

typedef struct base_type base_type;
struct base_type {
    u32 id, type;
    union {
        base_type_trigger     trigger;
        base_type_pickup      pickup;
        base_type_platform    platform;
        base_type_static      staticc;
        base_type_timer       timer;
        base_type_group       group;
        base_type_sfx         sfx;
        base_type_counter     counter;
        base_type_button      button;
        base_type_dispatcher  dispatcher;
        base_type_cond        cond;
        base_type_uifont      uifont;
        base_type_teleportbox tpbox;
        base_type_taskbox     taskbox;
        base_type_taxi        taxi;
        base_type_camerafly   camfly;
    };
    base_type *next;
};

// TODO(jelly): alloc base_types better
typedef struct {
    u8 visited;
    f32 offsetx;
    f32 offsety;
    base_type *base;
    /*s32 count;
    base_type *head;
    base_type *tail;*/
} bfbb_save_file_block_scene;

typedef struct {
    union {
        u32 id;
        char id_chars[4];
    };
    s32 block_size;
    s32 bytes_used;
} bfbb_save_file_block_header;

typedef struct {
    bfbb_save_file_block_header header;
    union {
        unsigned char raw_bytes[512 - sizeof(bfbb_save_file_block_header)]; // NOTE(jelly): padding to 1/2 KiB
        
        bfbb_save_file_block_gdat gdat;
        bfbb_save_file_block_ledr ledr;
        bfbb_save_file_block_room room;
        bfbb_save_file_block_pref pref;
        bfbb_save_file_block_svid svid;
        bfbb_save_file_block_plyr plyr;
        bfbb_save_file_block_cntr cntr;
        bfbb_save_file_block_scene scene;
    };
} bfbb_save_file_block;
#pragma pack(pop)

typedef struct {
    s32 capacity;
    s32 in_use;
    base_type *stack;
} base_type_stack;

// NOTE(jelly): bfbb_save_file contains everything EXCEPT
//                -the 0x5880-sized GCI header
//                -the GDAT block (which goes at the start)
//                -the gigantic SFIL block (which goes at the end)
//                -any 0xBF padding
//                -any zero-padding at the end (like in .gci)
typedef struct {
    int original_file_size;
    u32 original_crc32_checksum; // NOTE(jelly): these probably aren't needed
    int is_big_endian;
    //base_type_stack base_stack;
    int block_count;
    bfbb_save_file_block blocks[64];
} bfbb_save_file;

typedef struct {
    int size;
    unsigned char *bytes;
} buffer;

typedef struct {
    int max_size;
    int size;
    unsigned char *bytes;
} write_buffer;

//#define FOURCC(s) ((u32)(((s)[0]) | ((s)[1] << 8) | ((s)[2] << 16) | ((s)[3] << 24)))
#define FOURCC_CONST(a,b,c,d) ((u32)(((d)) | ((c) << 8) | ((b) << 16) | ((a) << 24)))

// NOTE(jelly): i love programming languages
#define FOURCC_GDAT FOURCC_CONST('G', 'D', 'A', 'T')
#define FOURCC_LEDR FOURCC_CONST('L', 'E', 'D', 'R')
#define FOURCC_ROOM FOURCC_CONST('R', 'O', 'O', 'M')
#define FOURCC_PLYR FOURCC_CONST('P', 'L', 'Y', 'R')

#define FOURCC_JF01 FOURCC_CONST('J', 'F', '0', '1')
#define FOURCC_JF02 FOURCC_CONST('J', 'F', '0', '2')
#define FOURCC_JF03 FOURCC_CONST('J', 'F', '0', '3')
#define FOURCC_JF04 FOURCC_CONST('J', 'F', '0', '4')
#define FOURCC_KF01 FOURCC_CONST('K', 'F', '0', '1')
#define FOURCC_KF02 FOURCC_CONST('K', 'F', '0', '2')
#define FOURCC_KF04 FOURCC_CONST('K', 'F', '0', '4')
#define FOURCC_KF05 FOURCC_CONST('K', 'F', '0', '5')
#define FOURCC_MNU3 FOURCC_CONST('M', 'N', 'U', '3')
#define FOURCC_RB01 FOURCC_CONST('R', 'B', '0', '1')
#define FOURCC_RB02 FOURCC_CONST('R', 'B', '0', '2')
#define FOURCC_RB03 FOURCC_CONST('R', 'B', '0', '3')
#define FOURCC_SM01 FOURCC_CONST('S', 'M', '0', '1')
#define FOURCC_SM02 FOURCC_CONST('S', 'M', '0', '2')
#define FOURCC_SM03 FOURCC_CONST('S', 'M', '0', '3')
#define FOURCC_SM04 FOURCC_CONST('S', 'M', '0', '4')
#define FOURCC_B101 FOURCC_CONST('B', '1', '0', '1')
#define FOURCC_B201 FOURCC_CONST('B', '2', '0', '1')
#define FOURCC_B302 FOURCC_CONST('B', '3', '0', '2')
#define FOURCC_B303 FOURCC_CONST('B', '3', '0', '3')
#define FOURCC_BB01 FOURCC_CONST('B', 'B', '0', '1')
#define FOURCC_BB02 FOURCC_CONST('B', 'B', '0', '2')
#define FOURCC_BB03 FOURCC_CONST('B', 'B', '0', '3')
#define FOURCC_BB04 FOURCC_CONST('B', 'B', '0', '4')
#define FOURCC_BC01 FOURCC_CONST('B', 'C', '0', '1')
#define FOURCC_BC02 FOURCC_CONST('B', 'C', '0', '2')
#define FOURCC_BC03 FOURCC_CONST('B', 'C', '0', '3')
#define FOURCC_BC04 FOURCC_CONST('B', 'C', '0', '4')
#define FOURCC_BC05 FOURCC_CONST('B', 'C', '0', '5')
#define FOURCC_DB01 FOURCC_CONST('D', 'B', '0', '1')
#define FOURCC_DB02 FOURCC_CONST('D', 'B', '0', '2')
#define FOURCC_DB03 FOURCC_CONST('D', 'B', '0', '3')
#define FOURCC_DB04 FOURCC_CONST('D', 'B', '0', '4')
#define FOURCC_DB06 FOURCC_CONST('D', 'B', '0', '6')
#define FOURCC_GL01 FOURCC_CONST('G', 'L', '0', '1')
#define FOURCC_GL02 FOURCC_CONST('G', 'L', '0', '2')
#define FOURCC_GL03 FOURCC_CONST('G', 'L', '0', '3')
#define FOURCC_GY01 FOURCC_CONST('G', 'Y', '0', '1')
#define FOURCC_GY02 FOURCC_CONST('G', 'Y', '0', '2')
#define FOURCC_GY03 FOURCC_CONST('G', 'Y', '0', '3')
#define FOURCC_GY04 FOURCC_CONST('G', 'Y', '0', '4')
#define FOURCC_HB00 FOURCC_CONST('H', 'B', '0', '0')
#define FOURCC_HB01 FOURCC_CONST('H', 'B', '0', '1')
#define FOURCC_HB02 FOURCC_CONST('H', 'B', '0', '2')
#define FOURCC_HB03 FOURCC_CONST('H', 'B', '0', '3')
#define FOURCC_HB04 FOURCC_CONST('H', 'B', '0', '4')
#define FOURCC_HB05 FOURCC_CONST('H', 'B', '0', '5')
#define FOURCC_HB06 FOURCC_CONST('H', 'B', '0', '6')
#define FOURCC_HB07 FOURCC_CONST('H', 'B', '0', '7')
#define FOURCC_HB08 FOURCC_CONST('H', 'B', '0', '8')
#define FOURCC_HB09 FOURCC_CONST('H', 'B', '0', '9')
#define FOURCC_HB10 FOURCC_CONST('H', 'B', '1', '0')
#define FOURCC_PG12 FOURCC_CONST('P', 'G', '1', '2')

#ifdef BFBBMIX
#define FOURCC_B102 FOURCC_CONST('B', '1', '0', '2')
#define FOURCC_DB05 FOURCC_CONST('D', 'B', '0', '5')
#define FOURCC_EX01 FOURCC_CONST('E', 'X', '0', '1')
#define FOURCC_EX02 FOURCC_CONST('E', 'X', '0', '2')
#define FOURCC_EX03 FOURCC_CONST('E', 'X', '0', '3')
#define FOURCC_EX04 FOURCC_CONST('E', 'X', '0', '4')
#define FOURCC_EX05 FOURCC_CONST('E', 'X', '0', '5')
#define FOURCC_EX06 FOURCC_CONST('E', 'X', '0', '6')
#define FOURCC_EX07 FOURCC_CONST('E', 'X', '0', '7')
#define FOURCC_EX08 FOURCC_CONST('E', 'X', '0', '8')
#define FOURCC_EX09 FOURCC_CONST('E', 'X', '0', '9')
#define FOURCC_PG02 FOURCC_CONST('P', 'G', '0', '2')
#define FOURCC_PG13 FOURCC_CONST('P', 'G', '1', '3')
#endif

#define FOURCC_CNTR FOURCC_CONST('C', 'N', 'T', 'R')
#define FOURCC_PREF FOURCC_CONST('P', 'R', 'E', 'F')
#define FOURCC_SVID FOURCC_CONST('S', 'V', 'I', 'D')
#define FOURCC_SFIL FOURCC_CONST('S', 'F', 'I', 'L')

typedef struct { char *name; u32 type; } base_type_and_name;

// TODO(jelly): make this more of a lut
base_type_and_name base_names[] = {
    {"Trigger",      1},
    {"Pickup" ,      4},
    {"Platform",     6},
    {"Static"  ,    11},
    {"Timer"   ,    14},
    {"Portal"  ,    16},
    {"Group"   ,    17},
    {"SFX"     ,    19},
    {"Counter" ,    22},
    {"Button"   ,   24},
    {"Dispatcher",  30},
    {"Cond"       , 31},
    {"UI Font"    , 33},
    {"Cutscene Manager", 40},
    {"Teleport Box", 49},
    {"Task Box"    , 53},
    {"Taxi"       , 57},
    {"Camera Fly"  , 62},
};

char *get_base_type_name(u32 type) {
    for (int i = 0; i < ArrayCount(base_names); i++) {
        if (base_names[i].type == type) return base_names[i].name;
    }
    return "";
}

u32 drawable_block_ids[] = {
    FOURCC_LEDR, FOURCC_PLYR, FOURCC_PREF, FOURCC_CNTR, FOURCC_ROOM
};

int is_drawable_block(bfbb_save_file_block *block) {
    u32 id = block->header.id;
    for (int i = 0; i < ArrayCount(drawable_block_ids); i++) {
        if (id == drawable_block_ids[i]) return 1;
    }
    return 0;
}

char* thumbnail_label_from_id(u32 id)
{
    char* lookup[15] = {
        "Bikini Bottom",
        "Jellyfish Fields",
        "Downtown Bikini Bottom",
        "Goo Lagoon",
        "Poseidome",
        "Rock Bottom",
        "Mermalair",
        "Sand Mountain",
        "Industrial Park",
        "Kelp Forest",
        "Flying Dutchman's Graveyard",
        "SpongeBob's Dream",
        "Chum Bucket Lab",
        "Patrick",
        "Mr. Krabs"
    };
    if (id < 0) id = 0;
    if (id > 14) id = 14;
    return lookup[id];
}

#endif //BFBB_SAVE_H
